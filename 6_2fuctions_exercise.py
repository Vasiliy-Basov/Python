movie = '      leon'
rating = 100

movie1 = ' Alien'
rating1 = 110

movie2 = ' Terminator'
rating2 = 120


# Тип object он является родительским типом для всех классов и типов данных в языке Python.
# -> object - Эта часть означает, что функция mr возвращает объект типа object.
# Это означает, что функция может вернуть объект любого типа.
# Вот некоторые из наиболее распространенных встроенных типов данных в Python:
# Числовые типы:
#
# int (целые числа) - например, 5, -10.
# float (вещественные числа) - например, 3.14, -0.5.
# complex (комплексные числа) - например, 2+3j.
# Строковые типы:
#
# str (строки) - последовательности символов, например, "Привет, мир!".
# Логический тип:
#
# bool (булев тип) - может быть True или False, используется для выражения истинности или ложности.
# Списки:
#
# list (списки) - упорядоченные изменяемые последовательности объектов, например, [1, 2, 3].
# Кортежи:
#
# tuple (кортежи) - упорядоченные неизменяемые последовательности объектов, например, (1, 2, 3).
# Множества:
#
# set (множества) - неупорядоченные изменяемые коллекции уникальных элементов, например, {1, 2, 3}.
# Словари:
#
# dict (словари) - коллекции пар "ключ-значение",
# используемые для хранения и доступа к данным по ключу, например, {"имя": "Анна", "возраст": 30}.
# Другие специализированные типы:
#
# bytes (байтовые строки) - для работы с бинарными данными.
# bytearray (изменяемые байтовые строки) - подобно bytes, но изменяемые.
# NoneType (тип None) - для представления отсутствия значения.
# Это основные встроенные типы данных в Python.
# Кроме того, вы также можете создавать собственные пользовательские типы данных, определяя классы.

# Функция которая принимает в качестве параметров два аргумента любого типа и соединяет их в строку
def mr(film: object, r: object) -> object:
    result = f'{film} - {r}'
    return result
    # print(result)


print(mr(movie, rating).title().strip())
print(mr(movie1, rating1).strip().title())
print(mr(movie2, rating2).strip().title())
